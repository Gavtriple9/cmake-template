#!/usr/bin/env python3

import os

THIS_FILE = os.path.abspath(__file__)
ROOT_DIR = os.path.dirname(THIS_FILE)
TEMPLATE_EXT = ".ini"


def envsubst(input_dir: str):
    directory = os.listdir(input_dir)
    for file in directory:
        base_path = os.path.relpath(input_dir, ROOT_DIR)
        file_path = os.path.join(base_path, file)

        if os.path.isdir(file_path):
            envsubst(file_path)

        elif file.endswith(TEMPLATE_EXT):
            # Replace the variables in the file
            input_file = os.path.join(input_dir, file)
            output_file = os.path.join(input_dir, file.replace(TEMPLATE_EXT, ""))
            os.system(f"envsubst < {input_file} > {output_file}")
            # delete the original file
            os.remove(input_file)


def fnsubst(input_dir: str, project_name: str = None):
    directory = os.listdir(input_dir)
    for file in directory:
        base_path = os.path.relpath(input_dir, ROOT_DIR)
        file_path = os.path.join(base_path, file)

        if os.path.isdir(file_path):
            if "PROJ_NAME_LOWER" in file_path:
                new_file_path = file_path.replace(
                    "PROJ_NAME_LOWER", project_name.lower()
                )
                os.rename(file_path, new_file_path)
                fnsubst(new_file_path, project_name)
                continue
            elif "PROJ_NAME_UPPER" in file_path:
                new_file_path = file_path.replace(
                    "PROJ_NAME_UPPER", project_name.upper()
                )
                os.rename(file_path, new_file_path)
                fnsubst(new_file_path, project_name)
                continue
            elif "PROJ_NAME_CAPITAL" in file_path:
                new_file_path = file_path.replace(
                    "PROJ_NAME_CAPITAL", project_name.capitalize()
                )
                os.rename(file_path, new_file_path)
                fnsubst(new_file_path, project_name)
                continue
            elif "PROJ_NAME" in file_path:
                new_file_path = file_path.replace("PROJ_NAME", project_name)
                os.rename(file_path, new_file_path)
                fnsubst(new_file_path, project_name)
                continue

            fnsubst(file_path, project_name)

        if "PROJ_NAME_LOWER" in file_path:
            new_file_path = file_path.replace("PROJ_NAME_LOWER", project_name.lower())
            os.rename(file_path, new_file_path)
        elif "PROJ_NAME_UPPER" in file_path:
            new_file_path = file_path.replace("PROJ_NAME_UPPER", project_name.upper())
            os.rename(file_path, new_file_path)
        elif "PROJ_NAME_CAPITAL" in file_path:
            new_file_path = file_path.replace(
                "PROJ_NAME_CAPITAL", project_name.capitalize()
            )
            os.rename(file_path, new_file_path)
        elif "PROJ_NAME" in file_path:
            new_file_path = file_path.replace("PROJ_NAME", project_name)
            os.rename(file_path, new_file_path)


def main():
    env_file = os.path.join(ROOT_DIR, ".env")
    if os.path.exists(env_file):
        with open(env_file) as f:
            for line in f:
                if line.strip() and not line.startswith("#"):
                    key, value = line.strip().split("=", 1)
                    os.environ[key] = value.replace('"', "")

    project_name = os.getenv("PROJ_NAME")
    project_version = os.getenv("PROJ_VERSION")
    project_desc = os.getenv("PROJ_DESC")
    author_first = os.getenv("AUTHOR_FIRST")
    author_last = os.getenv("AUTHOR_LAST")
    author_email = os.getenv("AUTHOR_EMAIL")
    organization = os.getenv("ORGANIZATION")

    print(f"Project Name: {project_name}")
    print(f"Project Version: {project_version}")
    print(f"Project Description: {project_desc}")
    print(f"Author: {author_first} {author_last}")
    print(f"Author Email: {author_email}")
    print(f"Organization: {organization}")

    if not project_name:
        return

    os.environ["PROJ_NAME_UPPER"] = project_name.upper()
    os.environ["PROJ_NAME_LOWER"] = project_name.lower()
    os.environ["PROJ_NAME_CAPITAL"] = project_name.capitalize()

    INPUT_DIRS = [
        ROOT_DIR,
        os.path.join(ROOT_DIR, "examples"),
        os.path.join(
            ROOT_DIR,
            "include",
        ),
        os.path.join(ROOT_DIR, "src"),
        os.path.join(ROOT_DIR, "test"),
        os.path.join(ROOT_DIR, "src"),
    ]

    for input_dir in INPUT_DIRS:
        if not os.path.exists(input_dir):
            return
        envsubst(input_dir)
        fnsubst(input_dir, project_name)

    os.remove(env_file)


if __name__ == "__main__":
    main()
